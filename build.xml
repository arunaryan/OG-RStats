<project name="og-rstats" default="compile">

  <property name="wkspace.dir" value="${basedir}/../.." />
  <subant antfile="build-prefix.xml" buildpath="${basedir}" target="fetch-og-language-build">
    <property name="wkspace.dir" value="${wkspace.dir}" />
  </subant>
  <import file="${basedir}/build-prefix.xml" />

  <path id="java.build.path">
    <pathelement path="${basedir}/Ext" />
  </path>
  <path id="javatest.build.path">
    <path refid="java.build.path" />
  </path>
  <path id="cc.build.path">
    <pathelement path="${basedir}/Client" />
  </path>
  <path id="cctest.build.path">
    <pathelement path="${basedir}/ClientTest" />
  </path>

  <import file="${og.language.dir}/build-suffix.xml" />

  <!-- This pattern should probably be in OG-Language; it will be needed for any child project -->
  <target name="unpack-resolve" depends="build-suffix.unpack-resolve">
    <unpack-zip org="com.opengamma" name="og-language" type="include" />
    <unpack-zip org="com.opengamma" name="og-language" type="lib" />
    <unpack-zip org="com.opengamma" name="og-language" type="bin" />
  </target>

  <target name="deploy-jars" depends="build-suffix.deploy-jars">
    <move file="${build.dir}/jar/com.opengamma-og-language-og-language-client.jar" tofile="${build.dir}/client.jar" />
    <copy todir="${build.dir}" file="${basedir}/config/logback.xml" failonerror="false" />
    <copy todir="${build.dir}" file="${basedir}/config/OpenGamma.properties" />
    <mkdir dir="${build.dir}/ext" />
    <copy todir="${build.dir}/ext">
      <fileset dir="${og.language.dir}/config">
        <include name="0og-language.xml" />
      </fileset>
    </copy>
    <copy todir="${build.dir}/ext" file="${basedir}/config/R.xml" />
  </target>

  <target name="compile" depends="build-suffix.compile">
    <subant target="compile" buildpath="${basedir}/package">
      <property name="module.version" value="${module.version}" />
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="dist" depends="compile,dist-impl,dist-binary" description="Creates a binary and source R package distribution" />
  
  <target name="dist-binary" depends="dist-binary-none,dist-binary-impl" />
  <target name="dist-binary-none" unless="r.env.ok">
    <echo>R or dependent libraries not installed - cannot build a binary distribution</echo>
  </target>
  <target name="dist-binary-impl" if="r.env.ok">
    <exec executable="R" failonerror="true">
      <arg value="CMD" />
      <arg value="build" />
      <arg value="--binary" />
      <arg value="${package.dir}/${package.name}" />
    </exec>
    <move todir="${dist.dir}">
      <fileset dir="${basedir}">
        <include name="${package.name}_*.zip" />
        <include name="${package.name}_*.tar.gz" />
      </fileset>
    </move>
  </target>

  <target name="dist-impl">
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${package.dir}" />
    <subant target="dist" buildpath="${basedir}/package">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="dist" buildpathref="java.build.path" antfile="build.parent-invoked.xml">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="dist" buildpathref="cc.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <copy todir="${package.dir}/${package.name}/src" file="version.h" />
    <!-- This is a source R dist, but only on a clean environment; otherwise it may contain
         binaries from an earlier build -->
    <zip destfile="${dist.dir}/${ant.project.name}-R.zip" basedir="${package.dir}" />
    <exec executable="R" failifexecutionfails="false" failonerror="true" resultproperty="r.installed.result">
      <arg value="--version" />
    </exec>
    <condition property="r.env.ok">
      <and>
        <equals arg1="${r.installed.result}" arg2="0" />
        <or>
          <available file="${build.dir}/Debug/libClient.a" />
          <available file="${build.dir}/Release/libClient.a" />
          <available file="${build.dir}/DebugWin32/Client.lib" />
          <available file="${build.dir}/ReleaseWin32/Client.lib" />
          <available file="${build.dir}/Debugx64/Client.lib" />
          <available file="${build.dir}/Releasex64/Client.lib" />
        </or>
      </and>
    </condition>
  </target>

  <target name="test-dist" depends="clean-dist,tests,dist-impl,test-dist-none,test-dist-impl" description="Tests the R package distribution using 'R CMD check'" />
  <target name="test-dist-none" unless="r.env.ok">
    <echo>R or dependent libraries not installed - cannot test the distribution package</echo>
  </target>
  <target name="test-dist-impl" if="r.env.ok">
    <exec executable="R" failonerror="true">
      <arg value="CMD" />
      <arg value="check" />
      <arg value="${package.dir}/${package.name}" />
    </exec>
  </target>

  <target name="install" depends="compile,dist-impl,install-none,install-impl" description="Installs the R package using 'R CMD INSTALL'" />
  <target name="install-none" unless="r.env.ok">
    <echo>R or dependent libraries not installed - cannot install the extension locally</echo>
  </target>
  <target name="install-impl" if="r.env.ok">
    <exec executable="R" failonerror="true">
      <arg value="CMD" />
      <arg value="INSTALL" />
      <arg value="${package.dir}/${package.name}" />
    </exec>
  </target>

  <target name="clean-tests" depends="build-suffix.clean-tests">
    <delete includeemptydirs="true" failonerror="false" dir="${basedir}/${package.name}.Rcheck" />
  </target>

</project>
